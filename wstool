#!/usr/bin/python

import os, signal, sys, argparse, zipfile, urllib2, shutil

options = []

def main():
    signal.signal(signal.SIGINT, exitSignal)

    global options
    if len(sys.argv) == 1:
        return

    options = [
        ('dirsize', dirsize, 'Get the size of the presentation'),
        ('zip', makezip, 'Create a portable zip file'),
        ('backup', backup, 'Create a zip file with the files that do\n\t\t\tnot belong to the framework.'),
        ('help', help, 'Show this help text.'),
        ('install-module', installModule, 'Install a module.')
    ]

    for option in options:
        if sys.argv[1] == option[0]:
            option[1]()

def exitSignal():
    exit()

def downloadFile(url):
    print('Initializing download ...')
    try:
        ulib = urllib2.urlopen(url)
    except:
        print('Unable to download the file.')
        exit()
    fp = open('downfile', 'wb')
    meta = ulib.info()
    totalsize = int(meta.getheaders('Content-Length')[0])
    fsize = 0
    blocksize = 1024
    while True:
        buf = ulib.read(blocksize)
        if not buf:
            break
        fsize += len(buf)
        fp.write(buf)
        status = 'Progress: [%3.0f %%]\r' % (fsize * 100 / totalsize)
        sys.stdout.write(status)
        sys.stdout.flush()
    fp.close()
    return 'downfile'

def moveModuleFiles(modname, srcdir):
    if len(modname) == 0:
        print('Do not delete the whole presentation')
        exit()
    modpath = os.path.join(os.getcwd(), 'framework', modname)
    if os.path.exists(modpath):
        shutil.rmtree(modpath)
    shutil.move(srcdir, modpath)

def rmdirs(base, dirlist):
    for direc in dirlist:
        shutil.rmtree(os.path.join(base, direc))

def rmfiles(base, fileslist):
    for fi in fileslist:
        os.remove(os.path.join(base, fi))

def installModule():
    if len(sys.argv) < 3:
        print('Available modules: mathjax, shjs, flot, shjs, jqplot, raphael')
        return
    module = sys.argv[2]

    tmpdir = '/tmp/wsunzip'
    if os.path.exists('/tmp/wsunzip'):
        shutil.rmtree('/tmp/wsunzip')
    os.mkdir('/tmp/wsunzip')

    if module == 'mathjax':
        path = downloadUnzip('http://github.com/mathjax/Mathjax/zipball/master')
        srcdir = os.path.join(path, os.listdir(path)[0])
        rmdirs(srcdir, ['fonts', 'docs', 'test', 'unpacked', 'config', 'jax/output/HTML-CSS/fonts/TeX'])
        rmfiles(srcdir, ['LICENSE', 'README.md', 'jax/output/HTML-CSS/imageFonts.js', 'extensions/MathMenu.js', 'extensions/MathZoom.js'])
    elif module == 'syntaxhighlighter':
        path = downloadUnzip('http://alexgorbatchev.com/SyntaxHighlighter/download/download.php?sh_current')
        srcdir = os.path.join(path, os.listdir(path)[0])
        rmdirs(srcdir, ['compass', 'tests', 'src'])
        rmfiles(srcdir, ['LGPL-LICENSE', 'MIT-LICENSE', 'index.html'])
    elif module == 'raphael':
        path = downloadFile('https://raw.github.com/DmitryBaranovskiy/raphael/master/raphael.js')
        srcdir = tmpdir
        shutil.move(path, os.path.join(tmpdir, 'raphael.js'))
    elif module == 'flot':
        path = downloadUnzip('http://flot.googlecode.com/files/flot-0.7.zip')
        srcdir = os.path.join(path, 'flot')
        rmdirs(srcdir, ['examples'])
        rmfiles(srcdir, ['FAQ.txt', 'LICENSE.txt', 'NEWS.txt', 'API.txt', 'Makefile', 'PLUGINS.txt', 'README.txt', 'excanvas.min.js'])
        for fname in os.listdir(srcdir):
            if not fname.endswith('.min.js') and fname.endswith('.js'):
                os.remove(os.path.join(srcdir, fname))
    elif module == 'jqplot':
        path = downloadUnzip('http://bitbucket.org/cleonello/jqplot/downloads/jquery.jqplot.1.0.0b2_r1012.zip')
        srcdir = os.path.join(path, 'dist')
        rmdirs(srcdir, ['examples', 'docs'])
        rmfiles(srcdir, ['jquery.js', 'optionsTutorial.txt', 'jquery.jqplot.css', 'jquery.jqplot.js', \
            'excanvas.js', 'excanvas.min.js', 'copyright.txt', 'changes.txt', 'gpl-2.0.txt', 'jqPlotCssStyling.txt',\
            'jqPlotOptions.txt', 'usage.txt', 'README.txt', 'MIT-LICENSE.txt'])
        for fname in os.listdir(os.path.join(srcdir, 'plugins')):
            if not fname.endswith('.min.js'):
                os.remove(os.path.join(srcdir, 'plugins', fname))
    elif module == 'jsxgraph':
        path = downloadFile('http://jsxgraph.uni-bayreuth.de/distrib/jsxgraph.css')
        shutil.move(path, os.path.join(tmpdir, 'jsxgraph.css'))
        path = downloadFile('http://jsxgraph.uni-bayreuth.de/distrib/jsxgraphcore.js')
        shutil.move(path, os.path.join(tmpdir, 'jsxgraphcore.js'))
        srcdir = tmpdir
    else:
        print('Module not available.')
        exit()
    moveModuleFiles(module, srcdir)
    print('Module ' + module + ' has been installed.')

def moveToDir(pathlist, filenames):
    for i in range(len(pathlist)):
        shutil.move(pathlist[i], os.path.join('/tmp/wsunzip', filenames[i]))
    return '/tmp/wsunzip'

def downloadUnzip(url):
    expath = downloadFile(url)
    return unzip(expath)

def unzip(fname):
    zf = zipfile.ZipFile(fname)
    # TODO check for tarbomb?
    zf.extractall('/tmp/wsunzip')
    zf.close()
    return '/tmp/wsunzip'

def makezip(framework=True):
    if framework:
        zipname = 'presentation.zip'
    else:
        zipname = 'backup.zip'
    print('Compressing to zip file ...')
    zf = zipfile.ZipFile(zipname, 'w', zipfile.ZIP_DEFLATED)

    for root, dirs, files in os.walk('.'):
        for fn in files:
            abspath = os.path.join(root, fn)
            if abspath.startswith('./.') or fn == 'presentation.zip' or fn == 'backup.zip' or \
                (abspath.startswith('./framework') and not framework):
                continue
            zf.write(abspath)
    zf.close()
    print(zipname + ' has size of %d kB' % (os.path.getsize(zipname)/1000.))


def dirsize():
    print('Uncompressed size: ')
    print('Compressed size: ')

def backup():
    print('Backup ...')
    makezip(False)

def help():
    print('Help text:')
    for option in options:
        print('\t' + option[0] + '\t\t' + option[2])

if __name__ == '__main__':
    main()
